<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from io.compuco.multicompanyaccounting/xml/schema/CRM/Multicompanyaccounting/BatchOwnerOrganisation.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:7b97140f41e079102217326233d1cca6)
 */
use CRM_Multicompanyaccounting_ExtensionUtil as E;

/**
 * Database access object for the BatchOwnerOrganisation entity.
 */
class CRM_Multicompanyaccounting_DAO_BatchOwnerOrganisation extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'multicompanyaccounting_batch_owner_org';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique BatchOwnerOrganisation ID
   *
   * @var int
   */
  public $id;

  /**
   * FK to Batch.
   *
   * @var int
   */
  public $batch_id;

  /**
   * FK to Contact
   *
   * @var int
   */
  public $owner_org_id;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'multicompanyaccounting_batch_owner_org';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Batch Owner Organisations') : E::ts('Batch Owner Organisation');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'batch_id', 'civicrm_batch', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'owner_org_id', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique BatchOwnerOrganisation ID'),
          'required' => TRUE,
          'where' => 'multicompanyaccounting_batch_owner_org.id',
          'table_name' => 'multicompanyaccounting_batch_owner_org',
          'entity' => 'BatchOwnerOrganisation',
          'bao' => 'CRM_Multicompanyaccounting_DAO_BatchOwnerOrganisation',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'batch_id' => [
          'name' => 'batch_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('FK to Batch.'),
          'where' => 'multicompanyaccounting_batch_owner_org.batch_id',
          'table_name' => 'multicompanyaccounting_batch_owner_org',
          'entity' => 'BatchOwnerOrganisation',
          'bao' => 'CRM_Multicompanyaccounting_DAO_BatchOwnerOrganisation',
          'localizable' => 0,
          'FKClassName' => 'CRM_Batch_DAO_Batch',
          'html' => [
            'label' => E::ts("Batch"),
          ],
          'add' => NULL,
        ],
        'owner_org_id' => [
          'name' => 'owner_org_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('FK to Contact'),
          'where' => 'multicompanyaccounting_batch_owner_org.owner_org_id',
          'table_name' => 'multicompanyaccounting_batch_owner_org',
          'entity' => 'BatchOwnerOrganisation',
          'bao' => 'CRM_Multicompanyaccounting_DAO_BatchOwnerOrganisation',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'panyaccounting_batch_owner_org', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'panyaccounting_batch_owner_org', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
